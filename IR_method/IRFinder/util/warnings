#!/usr/bin/perl
use strict;

my $outDir = $ARGV[0];
my $outputYN = 1;
if ($#ARGV > 0) {
	if ($ARGV[1] eq "N" || $ARGV[1] eq "n" || $ARGV[1] eq "0") {
		$outputYN = 0;
	}
}

my $OF;
if ($outputYN) {
	open $OF, ">", "$outDir/WARNINGS";
}else{
	open $OF, ">", "/dev/null";
}
#my $outputYN = $ARGV[1]; # optional, write to both STDERR and a file, or only to STDERR.

# Output file. Also, anything that is a warning ->STDERR.


my $chrTotBase = 0;
my $chrTotERCC = 0;
my $chrTotMT = 0;
my $chrTotAll = 0;
my $chrCountBase = 0;
my $chrCountERCC = 0;
my $chrCountMT = 0;
my $chrCountAll = 0;

if ( ! -f "$outDir/IRFinder-ChrCoverage.txt") {
	print STDERR "ERROR: IRFinder appears not to have completed. It appears an unknown component crashed.\n";
	print $OF "ERROR: IRFinder appears not to have completed. It appears an unknown component crashed.\n";
}

open IF, '<', "$outDir/IRFinder-ChrCoverage.txt";
while(<IF>) {
	my ($chr, $c) = split /\t/;
	$chrTotAll += $c;
	$chrCountAll += 1;
	if ($chr =~ m/^(chr)?[0-9]/i) {
		$chrTotBase += $c;
		$chrCountBase += 1;
	}elsif ($chr eq "M" || $chr eq "MT") {
		$chrTotMT += $c;
		$chrCountMT += 1;
	}elsif ($chr =~ m/^ERCC\-/) {
		$chrTotERCC += $c;
		$chrCountERCC += 1;
	}
}
close IF;
#"$outDir/IRFinder-ChrCoverage.txt"; # Total normal. Total ERCC. Total MT. Check ratios. Store Total normal.


my $roiPolyACount = 0;
my $roiPolyATotal = 0;
my $roiIntergenicCountBase = 0;
my $roiIntergenicTotalBase = 0;

if ( ! -f "$outDir/IRFinder-ROI.txt") {
	print STDERR "ERROR: IRFinder appears not to have completed. It appears an unknown component crashed.\n";
	print $OF "ERROR: IRFinder appears not to have completed. It appears an unknown component crashed.\n";
}
open IF, '<', "$outDir/IRFinder-ROI.txt";
while(<IF>) {
	my ($roi, $c) = split /\t/;
	if ($roi =~ m/^Intergenic\/(chr)?[0-9]/i) {
		$roiIntergenicTotalBase += $c;
		$roiIntergenicCountBase += 1;
	}elsif ($roi =~ m/^NonPolyA\//) {
		$roiPolyATotal += $c;
		$roiPolyACount += 1;
	}
}
close IF;
#"$outDir/IRFinder-ROI.txt"; # PolyA vs RiboMinus. Intergenic percentage.

my $sjKnownTotalBase = 0;
my $sjKnownCountBase = 0;
my $sjUnknownTotalBase = 0;
my $sjUnknownCountBase = 0;
if ( ! -f "$outDir/IRFinder-JuncCount.txt") {
	print STDERR "ERROR: IRFinder appears not to have completed. It appears an unknown component crashed.\n";
	print $OF "ERROR: IRFinder appears not to have completed. It appears an unknown component crashed.\n";
}
open IF, '<', "$outDir/IRFinder-JuncCount.txt";
while(<IF>) {
	my ($chr, $start, $end, $dir, $c) = split /\t/;
	if ($chr =~ m/^(chr)?[0-9]/i) {
		if ($dir eq ".") {
			$sjUnknownTotalBase += $c;
			$sjUnknownCountBase += 1 if ($c > 0);
		}else{
			$sjKnownTotalBase += $c;
			$sjKnownCountBase += 1 if ($c > 0);
		}
	}
}
close IF;
#"$outDir/IRFinder-JuncCount"; # Annotated as % of all SJ. Total SJ (in normal Chr) vs total reads (in normal Chr) - with read len correction? (need STAR Log.final.out for read-len correction).


my $trimRan = 0;
my $trimComplete = 0;
my $trimTotalInput = -1;
my $trimAdaptorPercent = -1;
# Not exist is ok -- that means it didn't start.
open IF, '<', "$outDir/trim.log";
while(<IF>) {
	chomp;
	if (m/^Started trimming/) {
		$trimRan = 1;
	}elsif (m/^Completed trimming/) {
		$trimComplete = 1;
	}elsif (m/% with adaptor$/) {
		($trimAdaptorPercent) = m/^([0-9\.]+)[ \t]/;
	}elsif (m/^Total input reads$/) {
		($trimTotalInput) = m/^([0-9]+)[ \t]/;
	}
}
close IF;
#"$outDir/trim.log"; # Did it complete? (is second line as expected)
# second line "Completed trimming"
# Total input reads
# % with adaptor


my $irfVersion = "";
my $irfRunmode = "";
my $irfPairs = -1;
my $irfSingles = -1;
my $irfNucl = -1;
my $irfErrors = -1;
my $dirEvidenceFor = 0;
my $dirEvidenceAgainst = 0;
my $dirMatchRef = -1;
my $dirOppRef = -1;
my $dirOutcome = 0;
open IF, '<', "$outDir/irfinder.stdout";
while(<IF>) {
	chomp;
	if (m/^IRFinder version:/) {
		($irfVersion) = m/[ \t]([^ ]+)$/;	
	}elsif (m/^IRFinder runmode:/) {
		($irfRunmode) = m/[ \t]([^ ]+)$/;
	}elsif (m/^Total nucleotides:/) {
		($irfNucl) = m/[ \t]([0-9]+)$/;
	}elsif (m/^Total pairs processed:/) {
		($irfPairs) = m/[ \t]([0-9]+)$/;
	}elsif (m/^Total singles processed:/) {
		($irfSingles) = m/[ \t]([0-9]+)$/;
	}elsif (m/^Error reads:/) {
		($irfErrors) = m/[ \t]([0-9]+)$/;
	}elsif (m/^Directionality: Dir evidence known junctions:/) {
		($dirEvidenceFor) = m/[ \t]([0-9]+)$/;
	}elsif (m/^Directionality: Nondir evidence known junctions:/) {
		($dirEvidenceAgainst) = m/[ \t]([0-9]+)$/;
	}elsif (m/^Directionality: Dir matches ref:/) {
		($dirMatchRef) = m/[ \t]([0-9]+)$/;
	}elsif (m/^Directionality: Dir opposed to ref:/) {
		($dirOppRef) = m/[ \t]([0-9]+)$/;
	}elsif (m/^RNA\-Seq directionality/) {
		($dirOutcome) = m/[ \t]([0-9]+)$/;
	}
}
close IF;
#"$outDir/irfinder.stdout"; # RNA-Seq directionality - clean or not? Any error reads? ie: perhaps bam is sorted. 
#IRFinder runmode: FastQ/BAM
#Total nucleotides -- ah - we don't need the STAR log file to determine length.
#Total pairs processed
#Total singles processed


### WARNINGS - calculate from metrics collected above, warn if outside of limits ###

if ($trimRan == 1) {
	if ($trimComplete == 0) {
		print STDERR "WARN: ERROR: The paired-end trimming routine appeared not to have completed. It may have crashed if there was corruption in the input fastq files. Do the input fastq files have the same number of lines?\n";
		print $OF "WARN: ERROR: The paired-end trimming routine appeared not to have completed. It may have crashed if there was corruption in the input fastq files. Do the input fastq files have the same number of lines?\n";
	}
	if ($trimAdaptorPercent > 30) {
		print STDERR "WARN: The paired-end trimming routine removed adaptor from a large percentage of reads. This experiment is likely still OK to analyse. However it indicates either over-fragmentation or contaminating short RNA or primer products, the insert size was far below optimum. These reads provide less information than they should for the given sequencing depth.\n";
		print $OF "WARN: The paired-end trimming routine removed adaptor from a large percentage of reads. This experiment is likely still OK to analyse. However it indicates either over-fragmentation or contaminating short RNA or primer products, the insert size was far below optimum. These reads provide less information than they should for the given sequencing depth.\n";
	}
}

if ($roiPolyACount > 0) {
	if ($roiPolyATotal/($chrTotBase+1) > 0.002 ) {
		print STDERR "WARN: This sample appears not to be PolyA+ enriched. Perhaps it was RiboDepleted instead? Use caution analysing the data, as non-mature mRNA will be present.\n";
		print $OF "WARN: This sample appears not to be PolyA+ enriched. Perhaps it was RiboDepleted instead? Use caution analysing the data, as non-mature mRNA will be present.\n";
	}
} #else, no PolyA ROI info available.

if ($sjUnknownTotalBase/($sjKnownTotalBase+$sjUnknownTotalBase+1) > 0.1) {
	print STDERR "WARN: This sample has excessive splice junctions at unannotated locations. This may indicate the experiment is not actually RNA-Seq. Or it indicates the genome fasta and annotation gtf were not compatible.\n";
	print $OF "WARN: This sample has excessive splice junctions at unannotated locations. This may indicate the experiment is not actually RNA-Seq. Or it indicates the genome fasta and annotation gtf were not compatible.\n";
}

if ($chrTotMT/($chrTotMT+$chrTotBase+1) > 0.4) {
	print STDERR "WARN: This sample has an excessive Mitochondrial component. This may indicate a specialised experiment. It may not be suitable to be used in comparisons with more regular experiments.\n";
	print $OF "WARN: This sample has an excessive Mitochondrial component. This may indicate a specialised experiment. It may not be suitable to be used in comparisons with more regular experiments.\n";
}

if ($roiIntergenicCountBase > 0) {
	if ($roiIntergenicTotalBase/$chrTotBase > 0.15) {
		print STDERR "WARN: This sample has excessive intergenic reads. This may indicate DNA contamination of an RNA-Seq experiment, or may indicate this experiment is not in fact RNA-Seq.\n";
		print $OF "WARN: This sample has excessive intergenic reads. This may indicate DNA contamination of an RNA-Seq experiment, or may indicate this experiment is not in fact RNA-Seq.\n";
	}
} #else, no Intergenic information.

my $approxFragLen = $irfNucl/($irfPairs+$irfSingles+$irfErrors);
my $sjCorrectionFactor = $approxFragLen-10;
if ($sjCorrectionFactor > 20) {
	if ($sjKnownTotalBase/($chrTotBase+1)/$sjCorrectionFactor < 0.0008) {
		print STDERR "WARN: Very low portion of reads have a splice junction. This may indicate the experiment is not an mRNA-Seq experiment.\n";
		print $OF "WARN: Very low portion of reads have a splice junction. This may indicate the experiment is not an mRNA-Seq experiment.\n";
	}
} #else, the approxFragLen calculation went astray, don't attempt calculation.

if (($dirEvidenceFor + $dirEvidenceAgainst) > 0) {
	my $dirScore = $dirEvidenceFor/($dirEvidenceFor+$dirEvidenceAgainst+1);
	if ($dirScore > 0.25 && $dirScore < 0.9) {
		print STDERR "WARN: This sample appears to have been prepared with a strand-specific protocol (directional RNA-Seq), however that process was substantially non-successful. A large number of reads appear opposed to the expected direction.\n";
		print $OF "WARN: This sample appears to have been prepared with a strand-specific protocol (directional RNA-Seq), however that process was substantially non-successful. A large number of reads appear opposed to the expected direction.\n";
	}elsif ($dirScore >= 0.9 && $dirScore < 0.95) {
		print STDERR "WARN: This sample was prepared with a strand-specific protocol (directional RNA-Seq). However more reads than desirable are opposite to expected sense.\n";
		print $OF "WARN: This sample was prepared with a strand-specific protocol (directional RNA-Seq). However more reads than desirable are opposite to expected sense.\n";
	}
}

close $OF;